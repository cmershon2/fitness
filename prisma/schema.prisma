generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String?
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]
  Weight          Weight[]
  Exercise        Exercise[]
  WorkoutTemplate WorkoutTemplate[]
  WorkoutInstance WorkoutInstance[]
  Food            Food[]
  DietEntry       DietEntry[]
  WaterEntry      WaterEntry[]
  UserWaterGoal   UserWaterGoal[]
  CompoundFood    CompoundFood[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Weight {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight    Float
  unit      String   @default("kg") // "kg" or "lbs"
  date      DateTime @default(now())
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, date])
  @@map("weight")
}

model Exercise {
  id               String             @id @default(uuid())
  userId           String
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name             String
  muscleGroup      String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  TemplateExercise TemplateExercise[]

  @@index([userId, muscleGroup])
  @@map("exercise")
}

model WorkoutTemplate {
  id          String             @id @default(uuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  exercises   TemplateExercise[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([userId])
  @@map("workout_template")
}

model TemplateExercise {
  id         String          @id @default(uuid())
  templateId String
  template   WorkoutTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise        @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  orderIndex Int
  sets       Int             @default(3)
  reps       Int             @default(10)
  notes      String?
  createdAt  DateTime        @default(now())

  @@index([templateId])
  @@index([exerciseId])
  @@map("template_exercise")
}

model WorkoutInstance {
  id            String             @id @default(uuid())
  userId        String
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId    String? // Reference only, for tracking origin
  name          String // Snapshot from template
  description   String?
  scheduledDate DateTime
  completedDate DateTime?
  status        String             @default("scheduled") // "scheduled", "in-progress", "completed"
  notes         String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  exercises     InstanceExercise[]

  @@index([userId, scheduledDate])
  @@index([userId, status])
  @@map("workout_instance")
}

model InstanceExercise {
  id                String          @id @default(uuid())
  workoutInstanceId String
  workoutInstance   WorkoutInstance @relation(fields: [workoutInstanceId], references: [id], onDelete: Cascade)
  exerciseId        String? // Reference only
  exerciseName      String // Snapshot from exercise
  muscleGroup       String? // Optional snapshot
  orderIndex        Int
  notes             String?
  sets              ExerciseSet[]
  createdAt         DateTime        @default(now())

  @@index([workoutInstanceId])
  @@map("instance_exercise")
}

model ExerciseSet {
  id                 String           @id @default(uuid())
  instanceExerciseId String
  instanceExercise   InstanceExercise @relation(fields: [instanceExerciseId], references: [id], onDelete: Cascade)
  setNumber          Int
  targetReps         Int
  actualReps         Int?
  weight             Float?
  unit               String           @default("kg") // "kg" or "lbs"
  completed          Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([instanceExerciseId])
  @@map("exercise_set")
}

model Food {
  id              String                   @id @default(uuid())
  userId          String
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String
  brand           String?
  barcode         String?
  calories        Int
  protein         Float?
  carbs           Float?
  fat             Float?
  servingSize     String?
  servingUnit     String?
  source          String                   @default("manual") // "manual", "barcode", "api", "compound"
  isCompound      Boolean                  @default(false)
  usedInCompounds CompoundFoodIngredient[]
  compoundFood    CompoundFood?            @relation("FoodCompound")
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  DietEntry       DietEntry[]

  @@index([userId])
  @@index([barcode])
  @@map("food")
}

model DietEntry {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodId       String
  food         Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  date         DateTime @db.Date
  mealCategory String // "breakfast", "lunch", "snack", "dinner"
  servings     Float    @default(1)
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId, date])
  @@index([foodId])
  @@map("diet_entry")
}

model WaterEntry {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  unit      String   @default("ml") // "ml", "oz", "cups"
  date      DateTime @db.Date
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  @@index([userId, date])
  @@map("water_entry")
}

model UserWaterGoal {
  userId    String   @id
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyGoal Float
  unit      String   @default("ml") // "ml", "oz", "cups"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_water_goal")
}

model CompoundFood {
  id          String                   @id @default(uuid())
  userId      String
  user        User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodId      String?                  @unique
  food        Food?                    @relation("FoodCompound", fields: [foodId], references: [id], onDelete: Cascade)
  name        String
  description String?
  servings    Float                    @default(1) // How many servings this recipe makes
  ingredients CompoundFoodIngredient[]
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt

  @@index([userId])
  @@map("compound_food")
}

model CompoundFoodIngredient {
  id               String       @id @default(uuid())
  compoundFoodId   String
  compoundFood     CompoundFood @relation(fields: [compoundFoodId], references: [id], onDelete: Cascade)
  ingredientFoodId String
  ingredientFood   Food         @relation(fields: [ingredientFoodId], references: [id], onDelete: Cascade)
  quantity         Float        @default(1) // Number of servings of the ingredient
  createdAt        DateTime     @default(now())

  @@index([compoundFoodId])
  @@index([ingredientFoodId])
  @@map("compound_food_ingredient")
}
